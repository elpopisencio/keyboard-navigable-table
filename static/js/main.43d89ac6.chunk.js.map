{"version":3,"sources":["keyboard.svg","components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","_ref","attributes","map","attribute","react_default","a","createElement","Body","_ref2","items","currentItem","setCurrentItem","item","class","id","onClick","Table","_ref4","_ref3","document","onkeydown","e","console","log","window","event","indexOf","keyCode","preventDefault","findIndex","length","handleKeysMovement","Table_Header","Table_Body","getUsers","setUsers","axios","get","then","data","catch","err","HEADER","App","_useState","useState","_useState2","Object","slicedToArray","users","_useState3","_useState4","currentUser","setCurrentUser","useEffect","slice","className","style","color","href","src","keyboard","alt","components_Table","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43d89ac6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/keyboard.2e2a2fca.svg\";","import React from 'react';\n\nconst Header = ({attributes}) =>\n  attributes.map(attribute => <th>{attribute}</th>);\n\nconst Body = ({items, attributes, currentItem, setCurrentItem}) =>\n  items.map(item => (\n    <tr class={currentItem && item.id === currentItem.id && 'is-selected'}>\n      {attributes.map(attribute => (\n        <td onClick={() => setCurrentItem(item)}>{item[attribute]}</td>\n      ))}\n    </tr>\n  ));\n\nconst handleKeysMovement = ({items, currentItem, setCurrentItem}) => {\n  document.onkeydown = e => {\n    console.log(currentItem);\n    e = e || window.event;\n    if ([37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n      e.preventDefault();\n    }\n    if (e.keyCode + '' === '38') {\n      !currentItem\n        ? setCurrentItem(items[items.length - 1])\n        : setCurrentItem(\n            items[items.findIndex(e => e.id === currentItem.id) - 1],\n          );\n    } else if (e.keyCode + '' === '40') {\n      !currentItem\n        ? setCurrentItem(items[0])\n        : setCurrentItem(\n            items[items.findIndex(e => e.id === currentItem.id) + 1],\n          );\n    }\n  };\n};\n\nconst Table = ({items, attributes, currentItem, setCurrentItem}) => {\n  handleKeysMovement({items, currentItem, setCurrentItem});\n  return (\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <Header attributes={attributes} />\n        </tr>\n      </thead>\n      <tfoot>\n        <tr>\n          <Header attributes={attributes} />\n        </tr>\n      </tfoot>\n      <tbody>\n        <Body\n          items={items}\n          attributes={attributes}\n          currentItem={currentItem}\n          setCurrentItem={setCurrentItem}\n        />\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Table from './components/Table';\nimport keyboard from './keyboard.svg';\n\nconst getUsers = (setUsers) =>\n\taxios\n\t\t.get('https://api.github.com/users')\n\t\t.then(({ data }) => setUsers(data))\n\t\t.catch((err) => console.log(err));\n\nconst HEADER = ['id', 'login'];\n\nfunction App() {\n\tconst [users, setUsers] = useState([]);\n\tconst [currentUser, setCurrentUser] = useState();\n\tuseEffect(() => {\n\t\tgetUsers((users) => setUsers(users.slice(0, 10)));\n\t}, []);\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"hero\">\n\t\t\t\t<div className=\"hero-body\">\n\t\t\t\t\t<h1 className=\"title is-1\">Keyboard Navigable Table</h1>\n\t\t\t\t\t<h2 className=\"subtitle is-4\">\n\t\t\t\t\t\t<div className=\"level\">\n\t\t\t\t\t\t\t<div className=\"level-left\">Made with React.</div>\n\t\t\t\t\t\t\t<div className=\"level-right\">\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\tstyle={{ color: 'inherit' }}\n\t\t\t\t\t\t\t\t\thref=\"https://elpopisencio.github.io\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<span class=\"icon is-large\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-home\"></i>\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\tstyle={{ color: 'inherit' }}\n\t\t\t\t\t\t\t\t\thref=\"https://github.com/elpopisencio/keyboard-navigable-table\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<span class=\"icon is-large\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fab fa-github\"></i>\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<img className=\"project-image\" src={keyboard} alt=\"\" />\n\t\t\t<section className=\"section\">\n\t\t\t\t<h3 className=\"title\">Description</h3>\n\t\t\t\t<p className=\"subtitle\">\n\t\t\t\t\tIn this project I made a keyboard navigable table with React.\n\t\t\t\t</p>\n\t\t\t</section>\n\t\t\t<Table\n\t\t\t\titems={users}\n\t\t\t\tattributes={HEADER}\n\t\t\t\tcurrentItem={currentUser}\n\t\t\t\tsetCurrentItem={setCurrentUser}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}